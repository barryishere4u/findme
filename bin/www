#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("express:server");
var https = require("https");
var fs = require("fs");
var socketio = require("socket.io");

/**
 * Get port from environment and store in Express.
 */
const options = {
  key: fs.readFileSync("privkey.pem"),
  cert: fs.readFileSync("cert.pem"),
};
var port = normalizePort(process.env.PORT || "4000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = https.createServer(options, app);

var io = socketio(server);
io.on("connection", (socket) => {
  console.log("A user has connected!");

  socket.on("join", ({ userid }) => {
    socket.join(userid, () => {});
  });

  socket.on("joinReceiverRoom", ({ receiverId }) => {
    socket.join(receiverId);
  });

  socket.on("sendMsg", ({ chatId, receiverId, senderId, time, msg }) => {
    socket.in(receiverId).emit("chatMsg", { chatId, senderId, time, msg });
  });

  socket.on("disconnection", () => {
    console.log("Socket is disconneted!");
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
